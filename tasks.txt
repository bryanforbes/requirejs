- anonymous modules:
  - require.modify does not allow anonymous?
  - Does building an anonymous i18n bundle into a layer work?
  - Support the require.def(function(require, exports, module){}) variant
    - AMD *must* order function args as require, exports, module.
    - Document this in API.md, along with normal anonymous modules:
      Create API page for those using just CommonJS stuff.
- packages:
  - document the configs.
    - Only support one version for each package. and do not allow nested package
      configs.

- FF2: priority test on empty cache fails?
- IE9 preview: the order plugin seems to be failing.
- Document data-main prop, both in main docs and jquery sample doc.

- Change jquery build options to include all the require functionality. Make
  sure all the builds still make sense and docs on download and jquery sample
  project are updated.
- jQuery 1.4.3:
  - Open ticket about just registering via require.def with something like:
  if( typeof require !== "undefined" && require.def )
    require.def(function() { return jQuery; });
  }
  then close out http://dev.jquery.com/ticket/5742
  Do this after the 0.14 release so that anonymous modules will be officially released.
  What about pages that use that new version but some 3rd party lib wants its own?
  That is what contexts are for.

- Converted Dojo release: gfx dojo.requireIf

- Allow module names that match Object.prototype method names?
- browser test for loading css?
- config option, noCache: true, to enable cache busting for misbehaved servers?

- loading packages:
  - plug in package config options
  - use package config in nameToUrl
  - Restructure code to use contexts for conflicting module versions.

- Best practices/architecture guide
- Allow r.js to work on Rhino

- consider removing require.isBrowser and require.s.isBrowser, check the tests, and send email to list first.
- include i18n and text plugins in node integration. Make sure text plugin works?
- Look at jquery ui adapter
- jquery as a module

- require.nameToUrl convertDojo.js for dojo.moduleUrl("dojo", "resources/blank.gif")
  would be cool to pass require.nameToUrl("dojo/resources/blank.gif") and have that work. Why is .js assumed?
- Deliver distribution of Dojo based on require
  - manual fix for requireIf in dojo.gfx, like what is done for dojo._base

- Option to remove the script tag after the script loads. Does that help memory? Does it work in all browsers?

- Possibly change dependency stuff to call module as soon as just its dependencies
  are ready instead of waiting for all the modules to "load", then are executed.
  Although could that cause problems with things that do implicit changes,
  things where there is not an explicit dependency listed, but still some things are expected to be there
  to work. Not sure I have a concrete case, but thinking of things like extensions to chainable APIs...
  Feels like there is something there important to consider. Right now I think
  that behavior for waiting for all the modules to "load" then get executed is good.

- Allow plugins to only implement methods it needs to use, but only if there is minimal/no impact on require.js

- de-dupe plugins in a build, make sure they are only included once? Or does that work already now with
  the latest changes?

- Make sure text plugin works offline.
- Make sure text plugin works in rhino env.
- Get Blackberry simulator. Blackberry greater than 4.6, and particulary with the Blackberry 9500 simulator (with OS v4.7),
install and launch Blackberry MDS service simulator before running simulator to get network.

- trying to find path of the file executed, as given to rhino:
http://groups.google.com/group/jsdoc-2/msg/b1dd2f8991156fa0

- with appName, and no native require, setting path to be outside the baseUrl meant that the require path was really
  relative to the output folder name?

- Use JSDoc to document a full module?

- loading more than one locale for a page. A locales= option? Need this for full
  Dojo conversion.

- When doing docs via jsdoc, using {some/module} as return types? How does JSDoc deal with the nested objects?
  Probably needs custom work to get it recognize the module concept thing.

- To validate with Caja: http://caja.appspot.com/ and paste the code inside a script tag.

Considered, but not implemented
-------------------------------
- Bryan: test if document load and document domcontentloaded. Safari 3 has trouble, can do addEventListener, but no DOMContentLoaded?
  Tested existing code (uses window load and document domcontentloaded, and require.ready fires correctly in Safari 3.2.3 on Windows, so this is not a high priority
  item.

- Look at module function call during recurse instead of building up the ordered
  array of modules. It was there to prevent issues with small call stacks in older Safaris,
  but now that should not be a problem. Not a big decrease in file size to switching,
  but just means there is fewer looping going on, so bulk perf gain? But it is just one
  loop reduction, small to the amount of function calling going on? Complicates build
  system too, where it overrides callModules to get the list of modules.
